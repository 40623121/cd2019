var tipuesearch = {"pages": [{'title': 'Introduction', 'text': '機械設計工程系 2019 Spring 協同產品設計實習 (Introduction to Collaborative Product Design Practice) \n 倉儲:\xa0 https://github.com/mdecourse/cd2019 \n 靜態網頁:  https://mde.tw/cd2019 \xa0 \n 動態網頁:  https://cd2019.herokuapp.com \xa0 \n 107學年教育目標: \n 本課程延續四技部計算機程式與電腦輔助設計實習之教學內容, 探討如何在網際協同環境進行機械產品開發. \n 107-2學期教育目標: \n 從 Intel-based 電腦硬體的組裝、安裝操作系統、配置網路連線到設定  CMSimfly \xa0, 引導學員學習如何運用電腦與網路系統, 自行架構符合機械協同設計流程使用之網際內容管理伺服系統. 之 後再利用此一網際協同環境進行機械產品開發. \n 達成學期教育目標之評量方式與標準: \n 評分比例: \n 學員出席 (20%) \n 電腦組裝與操作系統安裝 (10%) \n 網路連線配置與設定\xa0 (10%) \n Github 倉儲與 CMSimfly 配置 (30%) \n CMSimfly 操作 (20%) \n CMSimfly 開發 (10%) \n 評分方式: \n 學員自我評量 \xa0(30%) \n 分組自我評量 (30%) \n 倉儲歷程查驗 (40%) \n 教學方式: \n 課堂講授 \n 操作錄影 \n 學員實習 \n 分組報告 \n', 'tags': '', 'url': 'Introduction.html'}, {'title': 'V-rep', 'text': 'source:\xa0 http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_V-REP_Simulator \xa0 \n Now that you have the \xa0 MR code library , you need the cross-platform V-REP robot simulator to allow you to visualize the motions of robots. \xa0 You should complete the items on this page before moving on with the rest of the course! \xa0 Click on any of the images to make them larger. \n V-REP is computationally intensive. To minimize power usage, make sure to "pause" or "stop" a simulation when you are not using it. \n 1. \xa0 Go to \xa0 http://www.coppeliarobotics.com/ \xa0 and download and install the free V-REP PRO EDU software for your operating system. \n 2. \xa0 Launch V-REP and experiment with it. I suggest you choose File > Open scene... and open one of the example "scenes" that comes with V-REP. V-REP "scenes" are specifications of environments, robots, and their actions, and when you press the "play" button the simulation begins. Experimenting with these scenes will show you some of the capabilities of V-REP. For example, you could choose the "motionPlanningAndGrasping.ttt" scene, as shown in the image below. (All scene files end in .ttt.) \n', 'tags': '', 'url': 'V-rep.html'}, {'title': 'Get started', 'text': 'Now that you have the \xa0 MR code library , you need the cross-platform V-REP robot simulator to allow you to visualize the motions of robots. \xa0 You should complete the items on this page before moving on with the rest of the course! \xa0 Click on any of the images to make them larger. \n V-REP is computationally intensive. To minimize power usage, make sure to "pause" or "stop" a simulation when you are not using it. \n 1. \xa0 Go to \xa0 http://www.coppeliarobotics.com/ \xa0 and download and install the free V-REP PRO EDU software for your operating system. \n 2. \xa0 Launch V-REP and experiment with it. I suggest you choose File > Open scene... and open one of the example "scenes" that comes with V-REP. V-REP "scenes" are specifications of environments, robots, and their actions, and when you press the "play" button the simulation begins. Experimenting with these scenes will show you some of the capabilities of V-REP. For example, you could choose the "motionPlanningAndGrasping.ttt" scene, as shown in the image below. (All scene files end in .ttt.) \n \n \n Important note regarding screen resolution: \xa0 If you find the text and graphics to be too small on a high-resolution screen, you can edit the file "system/usrset.txt" to change the value of the variable "highResDisplay" to 1. On the Mac, this file is hidden in the directory "vrep.app" (the application you double-click to execute V-REP). You can see the contents of this directory using the Terminal utility on your Mac. In Terminal, use "cd" to navigate to the folder where vrep.app is, then cd to the directory "Contents/MacOS/system" to see usrset.txt. \n \n 3. \xa0 Press the "play" button at the top of the window to see the robots executing motion plans. \n \n 4. \xa0 We will be using several custom scenes in this specialization. You should download the .zip folder from \xa0 V-REP Introduction \xa0 and unzip it. The scenes include: interactive UR5 (Scene 1), csv animation UR5 (Scene 2), interactive youBot (Scene 3), and csv animation youBot (Scene 4). The Universal Robots UR5 is a 6-joint robot arm and the KUKA youBot is a mobile manipulator consisting of a 5-joint robot arm mounted on an omnidirectional robot base with 4 mecanum wheels. "Interactive" means that you can move sliders that represent the joint positions of the robot, and you\'ll see the robot move in response. "csv animation" means that the scene expects you to provide a "comma-separated values" (csv) file. A row of the file is a set of joint values, separated by commas, corresponding to the configuration of the robot at a particular instant. Subsequent rows are the configuration of the robot at later times, and the csv file is played as an animation by V-REP. \n Included in the .zip folder are the scene files themselves as well as example input files for some of the scenes. You should make sure your unzipped folder is in a convenient, memorable location on your computer, as you will have to type in the full path to the input files when you use them in the V-REP scenes that require them. \n 5. \xa0 If you currently have a simulation running in V-REP, press the "stop" button to stop it. Then choose File > Open scene... and open the interactive UR5 scene (Scene1_UR5.ttt) you downloaded. Press the "play" button, choose the "Joint Angle Sliders" tab, and experiment with moving the sliders to see how the joints move. \n \n 6. \xa0 Open and run (press "play") the youBot csv animation scene (Scene4_youBot_csv.ttt). Load the example .csv file for the youBot. You will have to provide the full path to the file; in the example on the Mac below, the path is "/Users/kevin/V-REP_scenes/Scene4_example.csv". After clicking "Open File," press the "Play" button just below where you entered the file path. You should see the mobile robot continually executing the trajectory encoded in the .csv file. \n \n The first line of the .csv file is \n 0,-0.526,0,0,-0.785,0.785,-1.571,0,0,0,0,0 \n where the comma-separated values represent: phi angle of mobile robot base, x position of mobile robot base, y position of mobile robot base, joint1, joint2, joint3, joint4, joint5, wheel1, wheel2, wheel3, wheel4. The angles of the wheels are included so you can see the wheels rotating as the robot moves. \n \n Important note regarding csv file format: \xa0 The example csv files included for use with the csv scenes assume that periods, not commas, are used as decimal points. So pi is written as 3.14, not as 3,14. If you are using Linux and your region settings are set to a region that uses commas as the decimal separator, one solution, suggested by a Coursera student, is to invoke V-REP using US English settings: \n \n LC_NUMERIC=en_US.UTF-8 ./vrep.sh\n \n \n Another option, also suggested by a Coursera student, is to open your Linux "System Settings" -> "Language support" -> "Regional Formats" tab. After changing the region to "English (United States)", log out and back in for the change to take effect. \n \n 7. \xa0 During this specialization, you will have to generate videos of V-REP visualizations. We have found it easiest to use screenshot-video tools for your operating system. On the Mac, you can use Quicktime to record videos from the screen. On Linux, you can use \xa0 SimpleScreenRecorder \xa0 or \xa0 recordMyDesktop , for example. On Windows, you can use \xa0 Screen Recorder . \n V-REP provides its own tool, which you can find at Tools>Video recorder. You may need to stop the current scene to be able to configure the video recorder. You can find more information on recording V-REP movies here: \xa0 http://www.coppeliarobotics.com/helpFiles/en/aviRecorder.htm . \n Try recording and saving a 10 second movie of the youBot animating the example .csv file. Your video should be of reasonable quality, but the compression should be such that the video doesn\'t use too much memory. For example, a few MB is a reasonably sized short video. \n When you\'re finished with the tasks above... \n Congratulations! \xa0 Your MR code library and the V-REP simulator are ready to use. Do not move on to the rest of the course until these are working for you. \n In this specialization we will mostly be using V-REP to visualize the motion of robot arms and wheeled mobile robots. For example, we use V-REP to animate your solutions to inverse kinematics, to display the dynamic motion of a robot arm according to dynamics calculations that you will write, to animate the results of path planners you develop, and to simulate a mobile manipulator manipulating an object. \n The \xa0 Modern Robotics \xa0 specialization does not teach how to use V-REP in detail, and it uses only a small fraction of V-REP\'s capabilities. If you want to learn more, you can find links to documentation \xa0 at the bottom of this page . \n', 'tags': '', 'url': 'Get started.html'}, {'title': 'V-rep Introduction', 'text': 'source:\xa0 http://hades.mech.northwestern.edu/index.php/V-REP_Introduction \xa0 \n \n Note: V-REP is computationally intensive. To minimize power usage, make sure to "pause" or "stop" a simulation when you are not using it. \n On \xa0 V-REP\'s homepage \xa0 the program is described as \n   ...the Swiss army knife among robot simulators: you won\'t find a simulator with more functions, features, or more elaborate APIs.\n \n V-REP\'s strength comes from several features: \n \n V-REP provides a unified framework combining many powerful internal and external libraries that are often useful for robotics simulations. This includes dynamic simulation engines, forward/inverse kinematics tools, collision detection libraries, vision sensor simulations, path planning, GUI development tools, and built-in models of many common robots. \n V-REP is highly extensible. V-REP developers provide an API that allows one to write custom plugins that add new features. You can embed \xa0 Lua \xa0 scripts directly into a simulation scene that, for example, process simulated sensor data, run control algorithms, implement user interfaces, or even send data to a physical robot. They also provide a remote API that allows one to develop standalone applications in many programming languages that are able to pass data in and out of a running V-REP simulation. \n V-REP is cross-platform, mostly open-source, and provides a free educational license. \n \n The purpose of this page is not to teach you how to use V-REP. Rather it is to describe demonstration scenes that have been developed to support learning from the book \xa0 Modern Robotics . If you are interested to learn more about V-REP, check out the \xa0 Useful Resources \xa0 section below. \n Demonstration V-REP Scenes \n DOWNLOAD ALL DEMONSTRATION V-REP SCENES AND INPUT FILES DESCRIBED BELOW. \n To run any of the scenes below, the first step will be to \xa0 download V-REP \xa0 for your operating system. You should download the latest non-limited EDUCATIONAL version. Next you will have to install V-REP. On Windows, you simply have an EXE that installs V-REP. On a Mac, you first need to unzip the download. The directory that is produced by unzipping the download contains a \xa0 vrep.app \xa0 directory that should allow you start V-REP through normal mechanisms, e.g., Finder/Spotlight/Launchpad. On Linux, you will need to extract the compressed tar archive (e.g., using a command like \xa0 tar xvf V-REP_PRO_EDU_V3_3_2_64_Linux.tar.gz ). Then you need to change directories into the V-REP source directory and run the \xa0 vrep.sh \xa0 shell script. \n Once V-REP is open you will want to run one of the scenes below. To run any of them, you first run V-REP, then you click \xa0 File->Open scene... \xa0 and open one of the ttt files that are linked below. Then click either the \xa0 Play \xa0 button from the top toolbar or click \xa0 Simulation->Start simulation \xa0 and a GUI should pop up. Clicking the \xa0 Stop \xa0 button or \xa0 Simulation->Stop simulation \xa0 will close the GUI and stop the simulation. \n Most of the scenes feature a simulation of a kinematically-controlled, non-respondable robot. \xa0 Kinematically controlled \xa0 means that all dynamics (inertias, torques, friction, etc.) of the system are neglected. We specify a configuration of the robot and it is instantaneously "teleported" to the new configuration. \xa0 Non-respondable \xa0 means that the links of the robot are not capable of interacting with the world or each other through collisions. In other words, we can put the robot in configurations that result in self-collisions. \n The "interactive" scenes allow you to visualize the robot as you change its configuration using sliders. The "CSV" scenes allow animations of a robot based on a trajectory stored in a comma-separated values file, where each line corresponds to a timestep and consists of comma-separated numbers specifying the robot\'s configuration at that timestep. There are no joint limits in the "CSV" scenes. \n This page has information on writing csv files in Python, MATLAB, and Mathematica. \n The CSV mobile manipulation scene is a partly dynamically-controlled simulation of a respondable \xa0 youBot \xa0 from \xa0 KUKA . \n \n Important note regarding csv file format: \xa0 The example csv files included below for use with the csv scenes assume that periods, not commas, are used as decimal points. So pi is written as 3.14, not as 3,14. If you are using Linux and your region settings are set to a region that uses commas as the decimal separator, one solution, suggested by a Coursera student, is to invoke V-REP using US English settings: \n \n LC_NUMERIC=en_US.UTF-8 ./vrep.sh\n \n \n Another option, also suggested by a Coursera student, is to open the Linux "System Settings" -> "Language support" -> "Regional Formats" tab. After changing the region to "English (United States)", log out and back in for the change to take effect. \n \n In each scene, there is a single Lua script called a \xa0 non-threaded child script . When the scene is first run, there is a function that is called that sets up the GUI and creates variables that are going to be needed later on in the simulation. Then during every step of the simulation the \xa0 main script , which is part of every V-REP scene, runs an "actuation" function from the child script. This actuation function is responsible for processing all of the changes to the GUI since the last time it was called (buttons clicked, label updates, etc.), and for sending joint commands to the simulated robot. Technically, there is also a "sensing" function in the child script that gets called by the main script, but in each of these scenes, the sensing function is empty. The GUIs are all built with V-REP\'s \xa0 Qt-based custom UI framework . \n Scene 1: Interactive UR5 \n \n (This scene had minor updates in August 2018.) \n This scene helps you visualize a \xa0 UR5 robot \xa0 from \xa0 Universal Robots . The model of the UR5 was created by importing a URDF from the ROS-Industrial \xa0 ur5_description package . The GUI in this scene features two tabs. One tab lets you drag sliders to modify the joint angles of each joint, and the other tab allows you to specify comma-separated angles for all 6 joints in an editable text box and ask for the SE(3) transformation from the base frame to the end-effector frame. The frames attached to the base and end-effector are persistently displayed (x-axis in red, y-axis in green, z-axis in blue). Note that all angles are specified in radians. \n Scene 1 files in the \xa0 download of all of the demonstration scenes : \n \n Scene1_UR5.ttt: the V-REP scene file. \n \n \n Scene 2: CSV Animation UR5 \n (This scene had minor updates in August 2018.) \n This scene animates the motion of the UR5 robot based on a csv file representing the trajectory of the robot. Each row of the csv file represents a timestep and each column of the csv file is the joint angle through time for one of the joints (first column is joint 1, last column is joint 6). \n Scene 2 files in the \xa0 download of all of the demonstration scenes : \n \n Scene2_UR5_csv.ttt: the V-REP scene file. \n Scene2_example.csv: an example input file. \n \n See the note above about making sure your language settings are appropriate to properly read csv files in Linux. \n Scene 3: Interactive youBot \n \n (Updated August 2018, to match the frame conventions used in the textbook and in Scene 4, animation of the youBot.) \n This scene helps you visualize a youBot mobile manipulator from KUKA. The KUKA youBot consists of a mecanum-wheel omnidirectional base and a 5R robot arm. Move the mobile base of the robot and the joints of the robot using sliders, and inspect the SE(3) representation of the resulting end-effector coordinate frame. All angles are represented in radians, and linear distances are represented in meters. The following frames are illustrated: the world frame {s}, a frame fixed to the center of the mobile chassis {b}, a frame fixed at the base of the robot arm {0}, and a frame fixed to the end-effector {e}. \n Scene 3 files in the \xa0 download of all of the demonstration scenes : \n \n Scene3_youBot.ttt: the V-REP scene file. \n \n \n Scene 4: CSV Animation youBot \n \n (This scene had minor updates in August 2018.) \n This scene animates the motion of the youBot based on a csv file representing the trajectory of the robot. Each row of the csv file represents a timestep and each column of the csv file is a configuration variable through time. The csv file has either 12 or 13 columns. Columns 1-3 represent the mobile base configuration variables, ordered as (phi, x, y), where phi is the angle of the base and (x, y) is the location of its center. Columns 4-8 represent the five arm joint angles, joint 1 through joint 5. Columns 9-12 represent the wheel angles, where wheel 1 is column 9 and wheel 4 is column 12, and the numbering of the wheels is shown in the figure on the right. Column 13 is optional. If it is present, then 0 means the gripper is open and 1 means the gripper is closed. If there is no column 13, then the gripper is open by default. All angles are specified in radians. \n Scene 4 files in the \xa0 download of all of the demonstration scenes : \n \n Scene4_youBot_csv.ttt: the V-REP scene file. \n Scene4_example.csv: an example input file. \n Scene4_base_motions: this folder has five basic motions of the youBot mobile base, showing the correct wheel motions associated with some basic motions of mobile base. You can check that your wheeled mobile base kinematics (or odometry) are correct by comparing your wheel motions to the wheel motions in these .csv files.\n \n yb1.csv: Constant speed spin in place (wheels on the left side and right side of the robot move at opposite speeds). \n yb2.csv: Constant speed forward motion (all wheels move at the same speed). \n yb3.csv: Constant speed sideways motion (wheels on opposite corners move at the same speed). \n yb4.csv: Constant speed diagonal motion (wheels 2 and 4 move at the same speed while wheels 1 and 3 are stationary). \n yb5.csv: Constant speed diagonal motion (wheels 1 and 3 move at the same speed while wheels 2 and 4 are stationary). \n \n \n \n See the note above about making sure your language settings are appropriate to properly read csv files in Linux. \n \n Scene 5: CSV Motion Planning Kilobot \n \n (This scene had minor updates in August 2018.) \n This scene allows you to visualize motion planning on an undirected graph using graph-search techniques such as A*. To visualize the planned motion, we are using the \xa0 kilobot \xa0 robot moving in a planar square environment of dimensions -0.5 <= x <= 0.5 and -0.5 <= y <= 0.5. Obstacles are represented as cylinders, and the graph itself is illustrated as blue nodes with yellow edges. The path that the kilobot actually follows is indicated by green edges, and the goal node is in red. See the image to the right. \n This scene does not do motion planning. Instead, it displays the output of your motion planner. It expects you to provide the path to a folder with four files, named nodes.csv, edges.csv, path.csv, and obstacles.csv: \n \n nodes.csv: If the graph has N nodes, then this file has N rows. Each row is of the form ID,x,y,heuristic-cost-to-go. ID is the unique integer ID number of the node, and these ID numbers should take values 1 through N. x, y are the (x,y) coordinates of the node in the plane. heuristic-cost-to-go is an optimistic approximation of the shortest path from this node to the goal node (e.g., the Euclidean distance to the goal node). This information is useful for A-star search but is not represented in the visualization of the path. \n \n \n edges.csv: If the graph has E edges, then this file has E rows. Each row is of the form ID1,ID2,cost. ID1 and ID2 are the node IDs of the nodes connected by the edge. cost is the cost of traversing that edge. This file can be empty if you do not wish to display edges. \n \n \n path.csv: This file specifies the solution path in the graph, and it is a single line, of the form ID1,ID2,... The first number is the ID of the first node in the solution path, and the last number is the ID of the last node in the solution path. If there is no solution to the motion planning problem, the path can consist of a single ID number, the ID of the node where the robot starts (and stays). \n \n \n obstacles.csv: This file specifies the locations and diameters of the circular obstacles. Each row is x, y, diameter, where (x,y) is the center of the obstacle and diameter is the diameter of the obstacle. This file can be empty if there are no obstacles. \n \n Nothing prevents you from providing files with nodes or edges inside obstacles. The path.csv file is the output of a graph search planner. Inputs to the planner could be the obstacles.csv file and a specification of the positions of the start and goal nodes, or it could be the nodes.csv and edges.csv files and a specification of the start and goal nodes, or it could be other information, depending on your planner. But in any case, this scene requires the four files above for the visualization. \n Scene 5 files in the \xa0 download of all of the demonstration scenes : \n \n Scene5_motion_planning.ttt: the V-REP scene file. \n Scene5_example.zip: a directory containing example input files nodes.csv, edges.csv, path.csv, and obstacles.csv. \n \n See the note above about making sure your language settings are appropriate to properly read csv files in Linux. \n You may be interested in: \n \n A description of an A* search project using this scene. \n A description of a sampling-based planning project using this scene. \n \n \n Scene 6: CSV Mobile Manipulation youBot \n \n (This scene had minor updates in August 2018.) \n This page has a description of a capstone mobile manipulation project using this scene, as well as more details regarding the operation of the physics engines, the kinematics of the youBot, properties of the end-effector (gripper), and properties of the cube. \n This scene has a youBot mobile manipulator and a cube. The youBot is expected to pick up the cube and put it down at a goal location ("pick and place"). This scene animates a user-specified csv file specifying the motion of the youBot, much as in Scene 4, except now the gripper interacts dynamically with the cube. Each row of the csv file has 13 variables: 3 for the chassis configuration (phi, x, y), 5 for the arm joint angles, 4 for the wheel angles (where the wheels are numbered as shown in Scene 4), and 1 for the gripper state (0 = open, 1 = closed). Unlike previous csv visualization scenes where V-REP simply makes a movie of the configurations, and there is no notion of the simulated time between successive lines in the csv file, this V-REP scene is performing a dynamic simulation, so the time between each line is important to determine the dynamic behavior. \xa0 The simulated time between each line of the csv file is 0.01 seconds (10 milliseconds). \n The gripper of the youBot and the cube are dynamically modeled to simulate practical pick-and-place. In other words, if the gripper does not close on the block properly, it may slide away, and if you open the gripper when it is holding a block, the block will fall to the floor. The interaction between the gripper and the block is governed by a "physics engine," which approximately accounts for friction, mass, inertial, and other properties. The default physics engine for this scene is ODE. \n Gripper opening and closing may take up to approximately 0.625 seconds. Assume, for example, that the first 100 lines of your csv file have the gripper state as 0 (open). Then, on line 101, you change the gripper state to 1 (closed). This transition from 0 to 1 initiates the closing action, but the closing may not actually complete for 0.625 seconds. So you should keep the gripper state at 1 for at least 63 consecutive lines of your csv file to ensure that the gripper closes all the way. Similarly, it may take up to 0.625 seconds for the gripper to open, so you should keep the gripper state at 0 for at least 63 consecutive lines to ensure that the gripper opens all the way. Gripper opening/closing actually terminates when a force threshold is reached on the fingers or the fingers have completed the motion. \n You can set the initial and goal configurations of the cube with a GUI inside the scene, but the default initial configuration is \xa0 \xa0 and the goal configuration is at \xa0 . \n Scene 6 files in the \xa0 download of all of the demonstration scenes : \n \n Scene6_youbot_cube.ttt: the V-REP scene file. \n Scene6_example.csv: an example input file solving the task when the cube\'s initial and goal configurations are the defaults. \n \n See the note above about making sure your language settings are appropriate to properly read csv files in Linux. \n \n Scene 7: CSV Animation MTB \n \n (This scene had minor updates in August 2018.) \n This scene simulates a RRPR robot. It animates a csv file containing a trajectory of joint angles. Each column of the csv file is the joint angle/length through time for one of the joints (in the order of RRPR). A single row of the csv file represents a complete configuration of the robot at a particular time. The prismatic joint (P) has the joint limit range [0, 0.2]. The assumed time step between rows is equal to the time step that V-REP uses for simulation; the default is 0.05 seconds. \n Scene 7 files in the \xa0 download of all of the demonstration scenes : \n \n Scene7_MTB_csv.ttt: the V-REP scene file. \n Scene7_example.csv: An example input file. \n \n See the note above about making sure your language settings are appropriate to properly read csv files in Linux. \n \n Scene 8: CSV youBot End-Effector Animation \n \n (This scene had minor updates in August 2018.) \n This page has a description of a capstone mobile manipulation project (specifically Milestone 2) using this scene. \n This scene is used in \xa0 Milestone 2 of the capstone mobile manipulation project . It animates the motion of the gripper of the youBot only (the rest of the youBot is not shown), and this scene is used to validate the planned motion of the gripper. Each line of the csv file has 13 comma-separated values: 12 from the top three rows of the transformation matrix \xa0 T s e \xa0 representing the configuration of the end-effector frame {e} relative to the space frame {s}, and 1 representing the gripper state (0 = open, 1 = closed). In other words, one line of the csv file is \n r11, r12, r13, r21, r22, r23, r31, r32, r33, px, py, pz, gripper state\n \n where the transformation matrix \xa0 T s e \xa0 is \n \n V-REP will animate the motion of the end-effector based on this csv file. It will also show the cube that is to be manipulated by the gripper, at its initial and goal configurations. \n The gripper does not dynamically interact with the cube, however.  \n \n This video shows an example of an animation created by this scene . In this video, the gripper opens and closes instantly, but this scene will show the gripper taking up to 0.625 seconds to open and close, just as in Scene 6. \n Scene 8 files in the \xa0 download of all of the demonstration scenes : \n \n Scene8_gripper_csv.ttt: the V-REP scene file. \n Scene8_example.csv: an example input file solving the task when the cube\'s initial and goal configurations are the defaults. \n \n See the note above about making sure your language settings are appropriate to properly read csv files in Linux. \n \n Switching Between Scenes \n Press the \xa0 Stop \xa0 button to stop the simulation of the current scene, then choose \xa0 File>Open scene... . You can also use \xa0 File>Open recent scene \xa0 to switch to a scene you previously loaded. Then you press the \xa0 Play \xa0 button to run the scene. Alternatively, stop the simulation and then press the \xa0 Scenes button in the top toolbar to see which scenes are currently open and select one to be in the foreground. The scene selector toolbar button may also be used to switch between opened scenes. Read more \xa0 here . \n Recording a Movie \n V-REP comes with a video recorder. Go to \xa0 Tools>Video recorder . You may need to stop the current scene to be able to configure the video recorder. You can find more information on recording V-REP movies here: \xa0 http://www.coppeliarobotics.com/helpFiles/en/aviRecorder.htm . \n A simpler option may be to just use your computer\'s screen recording software. On the Mac, you can use Quicktime. On Linux, you can use \xa0 SimpleScreenRecorder \xa0 or \xa0 recordMyDesktop . On Windows, you can use \xa0 Screen Recorder . Or you may have your own solution. \n Exploring Other Scenes \n You are encouraged to explore some of the (quite impressive) scenes that come pre-loaded with V-REP. You can find these scenes in the \xa0 scenes directory under the V-REP directory. Running and studying these can be a great way to learn more about the V-REP capabilities and to understand how to put together more complex scenes. \n Useful Resources \n \n V-REP User Manual and Other Resources \n V-REP Overview Presentation \n V-REP Videos Page \n V-REP Tutorial Series \n Overview of V-REP Features \n V-REP API Documentation \xa0 These are all functions that can either be called directly from a custom C/C++ plugin or through a Lua embedded script. \n Remote API Documentation \xa0 The Remote API is how V-REP enables scripts and programs written in other languages (MATLAB, Java, Python, etc.) to interact with a V-REP simulation \n', 'tags': '', 'url': 'V-rep Introduction.html'}, {'title': '參考資料', 'text': 'http://hades.mech.northwestern.edu/index.php/ME_449_Robotic_Manipulation \xa0 \n linear algebra.pdf \n http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_V-REP_Simulator \xa0 \n Modern Robotics library.7z \xa0( https://github.com/NxRLab/ModernRobotics ) \n https://github.com/NxRLab/ModernRobotics \xa0 \n MR_practice_exercises.pdf \n http://hades.mech.northwestern.edu/index.php/Mobile_Manipulation_Capstone \xa0 \n V-rep scenes.zip \n Springer Handbook of Robotics\xa0 \n https://link.springer.com/book/10.1007/978-3-319-32552-1 \xa0 \n http://handbookofrobotics.org/view-chapter/videodetails/0 \xa0', 'tags': '', 'url': '參考資料.html'}]};