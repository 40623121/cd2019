<h1>Introduction</h1>
<p>機械設計工程系 2019 Spring 協同產品設計實習 (Introduction to Collaborative Product Design Practice)</p>
<p>倉儲: <a href="https://github.com/mdecourse/cd2019">https://github.com/mdecourse/cd2019</a></p>
<p>靜態網頁: <a href="https://mde.tw/cd2019">https://mde.tw/cd2019</a> </p>
<p>動態網頁: <a href="https://cd2019.herokuapp.com">https://cd2019.herokuapp.com</a> </p>
<h4>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<h4>107學年教育目標:</h4>
<p>本課程延續四技部計算機程式與電腦輔助設計實習之教學內容, 探討如何在網際協同環境進行機械產品開發.</p>
<h4>107-2學期教育目標:</h4>
<p>使用可攜程式系統, 以及 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 與<a href="https://git-scm.com/download/win"> portable Git</a> 管理各學員與分組的動態與靜態網際內容管理系統, 同時利用 <a href="https://www.onshape.com/">Onshape</a> 與 <a href="http://www.coppeliarobotics.com/">V-rep</a> 執行機電資整合產品開發, 當面臨各協同設計階段所遭遇問題時, 各學員可利用客製化程式加以解決.</p>
<h4>達成學期教育目標之評量方式與標準:</h4>
<p>評分比例:</p>
<p style="padding-left: 30px;">學員出席 (20%)</p>
<p style="padding-left: 30px;">Github 倉儲管理  (20%)</p>
<p style="padding-left: 30px;">Onshape 協同操作 (20%)</p>
<p style="padding-left: 30px;">V-rep 模擬 (20%)</p>
<p style="padding-left: 30px;">程式開發 (20%)</p>
<p>評分方式:</p>
<p style="padding-left: 30px;">學員自我評量<span> (30%)</span></p>
<p style="padding-left: 30px;">分組自我評量 (30%)</p>
<p style="padding-left: 30px;">倉儲歷程查驗 (40%)</p>
<p>教學方式:</p>
<p style="padding-left: 30px;">課堂講授</p>
<p style="padding-left: 30px;">操作錄影</p>
<p style="padding-left: 30px;">學員實習</p>
<p style="padding-left: 30px;">分組報告</p><h1>實習任務</h1>
<h4>學習要點</h4>
<p>本學期的課程將從各學員自行製作可攜程式系統開始, 讓各學員以團隊協同的方式整理資料, 並且推選代表進行簡報.</p>
<p>此外, 透過 ungit 的導入, 讓 git 與 github 在圖形化介面與中文提交訊息的交互應用下, 能夠更加提升學習效果.</p>
<p>最後, 本學期希望能改寫 <a href="https://github.com/chiamingyen/pygrouf">Pygrouf</a> 成為合用的網際同儕互評暨自評系統.</p>
<h4>各學員執行任務</h4>
<p>請根據 <a href="http://mde.tw/wcm2019/content/實習項目二.html">http://mde.tw/wcm2019/content/實習項目二.html</a> 中的說明:</p>
<ol>
<li>自行建立一套可攜程式系統, 並將過程製作成 3~5 分鐘的簡報, 各班每十號推選一名代表利用課堂時間進行簡報說明.</li>
<li>請設法利用 ungit 管理自己的協同產品設計實習課程網頁 (格式自選, 系統自選).</li>
<li>
<p>請以各班每十號為一組, 研讀 Git 教材: <a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a> 並各自執行下列教材後, 推選一名代表利用課堂時間進行 3~5 分鐘的內容簡報說明.</p>
<p>Github 教材: <a href="https://lab.github.com/">https://lab.github.com/</a>  (已經以 scrum-1 帳號開始<a href="https://github.com/scrum-1/github-slideshow">學習流程</a>)</p>
</li>
</ol>
<h4>學習成果驗收</h4>
<ol>
<li>各學員確實閱讀 <a href="http://mde.tw/wcm2019/content/實習項目二.html">http://mde.tw/wcm2019/content/實習項目二.html</a><span> 中的說明, 並學會自行製作可攜程式系統.</span></li>
<li><span>各學員確實研讀 Git 教材: <a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a><span> 內容, 能夠整理出 3~5 分鐘的簡報.</span></span></li>
<li><span><span>各學員確實執行 <a href="https://lab.github.com/">https://lab.github.com/</a><span>  中的導引內容, 並能夠整理出 3~5 分鐘的簡報.</span></span></span></li>
</ol><h2>實習任務二</h2>
<h4>學習要點</h4>
<p>此任務將逐一導入 <a href="http://www.coppeliarobotics.com/helpFiles/en/tutorials.htm">http://www.coppeliarobotics.com/helpFiles/en/tutorials.htm</a> 中的導引內容.</p>
<p>首先上場的是:</p>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/bubbleRobTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/bubbleRobTutorial.htm</a> </p>
<h4>各學員執行任務</h4>
<p>各學員完成上述 Tutorial 後, 請將個人心得放入個人的課程網頁中.</p>
<h2>實習任務三</h2>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm</a> </p>
<h2>實習任務四</h2>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/lineFollowingBubbleRobTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/lineFollowingBubbleRobTutorial.htm</a> </p>
<h2>實習任務五</h2>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/inverseKinematicsTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/inverseKinematicsTutorial.htm</a> </p>
<h2>實習任務六</h2>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/externalControllerTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/externalControllerTutorial.htm</a> </p>
<p><a href="https://github.com/kmolab/pymcadp/tree/gh-pages/data/v-rep/vrep-api-python-demo">https://github.com/kmolab/pymcadp/tree/gh-pages/data/v-rep/vrep-api-python-demo</a> </p>
<p></p><h1>CMS</h1>
<p>協同產品設計實習的三項內容管理系統 (Content Management Systems) 包含</p>
<p><a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> (循序頁面電子書) - 各組網際協同產品設計規劃與使用說明電子書</p>
<p><a href="https://revealjs.com/#/">Reveal</a> (網際簡報系統) - 每一協同設計階段完成的簡要報告</p>
<p><a href="https://blog.getpelican.com/">Pelican Blog</a> (靜態網誌) - 依照日期紀錄各協同階段工作內容與結論</p>
<p>下載可攜程式環境: <a href="https://drive.google.com/file/d/1Cw8mHRcHKIZj7K7_m6x_af4vzo89539a/view?usp=sharing">kmol_2019.7z</a> (380MB, 解開約 1.5 GB)</p>
<h4>開發要點</h4>
<ol>
<li>多人協同編輯的 CMSimfly</li>
<li>近端網際 Reveal 編輯環境</li>
<li>更容易使用的 Pelican 靜態網誌轉換系統</li>
</ol>
<p></p><h1>Onshape</h1>
<h4>特性</h4>
<p>現有免費的整合 CAX 系統, 應力分析, render, CAM?</p>
<p>Featurescript 在協同產品開發流程中的角色</p>
<p><a href="https://github.com/onshape">https://github.com/onshape</a> </p>
<h2>BOMs</h2>
<p><a href="https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16985/First-Look-Onshape-Enterprise.aspx">https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16985/First-Look-Onshape-Enterprise.aspx</a>  (<a href="/downloads/FirstLook_OnshapeEnterprise _ ENGINEERING_com.pdf">pdf</a>)</p>
<h4>發布管理</h4>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Release_management">https://en.wikipedia.org/wiki/Release_management</a> </p>
<p style="padding-left: 30px;"><a href="https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16672/Onshape-Adds-Release-Management-Revamps-BOMs.aspx">https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16672/Onshape-Adds-Release-Management-Revamps-BOMs.aspx</a>  (<a href="/downloads/OnshapeAddsReleaseManagementRevampsBOMs _ ENGINEERING_com.pdf">pdf</a>)</p>
<h4>參數建模與直接建模</h4>
<p style="padding-left: 30px;"><a href="https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16587/Whats-the-Difference-Between-Parametric-and-Direct-Modeling.aspx">https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16587/Whats-the-Difference-Between-Parametric-and-Direct-Modeling.aspx</a>  (<a href="/downloads/What’s theDifferenceBetweenParametric_and_DirectModeling_ENGINEERING_com.pdf">pdf</a>)</p>
<p style="padding-left: 30px;"><a href="https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16304/We-Just-Remade-Parametric-Modeling-Says-Onshape.aspx">https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16304/We-Just-Remade-Parametric-Modeling-Says-Onshape.aspx</a>  (<a href="/downloads/WeJustRemadeParametricModelingSaysOnshape _ ENGINEERING_com.pdf">pdf</a>)</p>
<p><a href="/downloads/現代CAD機器設計.pdf">現代CAD機器設計.pdf</a></p>
<p><a href="/downloads/精通3D模擬.pdf">精通3D模擬.pdf</a></p>
<p><a href="/downloads/2018CAD技術趨勢.pdf">2018CAD技術趨勢.pdf</a></p>
<p><a href="/downloads/開解設計僵局.pdf">開解設計僵局.pdf</a></p>
<p><a href="/downloads/技術提示1.pdf">技術提示1.pdf</a></p>
<p><a href="/downloads/敏捷產品設計簡介.pdf">敏捷產品設計簡介.pdf</a></p>
<p><a href="/downloads/NI_Mechatronics_Machine_Design_Guide.pdf">NI_Mechatronics_Machine_Design_Guide.pdf</a></p>
<p>c-k theory: <a href="https://mde1a1.kmol.info/2017fall/wiki?name=c-k+design+theory">https://mde1a1.kmol.info/2017fall/wiki?name=c-k+design+theory</a> </p>
<p></p><h1>V-rep</h1>
<p>source: <a href="http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_V-REP_Simulator">http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_V-REP_Simulator</a> </p>
<p>Now that you have the<span> </span><a class="external text" href="https://github.com/NxRLab/ModernRobotics" rel="nofollow">MR code library</a>, you need the cross-platform V-REP robot simulator to allow you to visualize the motions of robots.<span> </span><b>You should complete the items on this page before moving on with the rest of the course!</b><span> </span>Click on any of the images to make them larger.</p>
<p><b>V-REP is computationally intensive. To minimize power usage, make sure to "pause" or "stop" a simulation when you are not using it.</b></p>
<p><b>1.</b><span> </span>Go to<span> </span><a class="external free" href="http://www.coppeliarobotics.com/" rel="nofollow">http://www.coppeliarobotics.com/</a><span> </span>and download and install the free V-REP PRO EDU software for your operating system.</p>
<p><b>2.</b><span> </span>Launch V-REP and experiment with it. I suggest you choose File &gt; Open scene... and open one of the example "scenes" that comes with V-REP. V-REP "scenes" are specifications of environments, robots, and their actions, and when you press the "play" button the simulation begins. Experimenting with these scenes will show you some of the capabilities of V-REP. For example, you could choose the "motionPlanningAndGrasping.ttt" scene, as shown in the image below. (All scene files end in .ttt.)</p>
<p><img alt="" height="534" src="/images/700px-VREP-demo-open.png" width="700"/></p>
<p><a href="/downloads/v-rep_remoteapi_ex.7z">v-rep_remoteapi_ex.7z</a></p><h2>V-rep Tutorial</h2>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/tutorials.htm">http://www.coppeliarobotics.com/helpFiles/en/tutorials.htm</a> </p>
<p>V-rep Tutorial:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/RZ-TCmL55c8" width="560"></iframe><span></span></p>
<p>Line Following Robot:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/xI-ZEewIzzI" width="560"></iframe><span></span></p>
<p>V-rep Scripts Writing:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/Zt21o1qsOB4" width="560"></iframe><span></span></p>
<p>Python Robot Simulation:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/SQont-mTnfM" width="560"></iframe><span></span></p>
<p>Path Planning:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/OfpB87pRoUk" width="560"></iframe><span></span></p>
<p>Dynamic Module:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/h9DXTRUmEEE" width="560"></iframe><span></span></p>
<p>V-rep Introduction and Bump Sensors:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/w68jmN1IBpo" width="560"></iframe><span></span></p>
<p>Inverse Kinematics:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/X73NzCc2E2c" width="560"></iframe><span></span></p>
<p>scene 模擬場景 - 包含環境與各種物件</p>
<p>scene object 場景中的物件 [http://www.coppeliarobotics.com/helpFiles/en/objects.htm] 包含</p>
<p>shape 零組件形體</p>
<p>camera 攝影機</p>
<p>light 光源</p>
<p>dummy 虛體 - 由一個有方位的點表示,沒有形體內容但具有形體性質的特殊物件</p>
<p>graph 圖形</p>
<p>path 路徑</p>
<p>mirror 鏡</p>
<p>point cloud 點雲</p>
<p>joint 軸</p>
<p>proximity sensor 近接感測器</p>
<p>vision sensor 視覺感測器</p>
<p>force/torque sensor 力/矩感測器</p>
<p>mill 銑</p>
<p>octree 八叉樹狀結構</p>
<p>model 場景中的模型</p>
<p>page 頁 - 每一個場景至多內置 8 個頁面, 每一個頁面則可以內置不限數量的視圖 (views), 頁面可視為視圖的容器.</p>
<p>view 視圖 - 透過攝影機、圖型或視覺感測器取的資料, 用於顯示場景內容.</p>
<h4>Main Script</h4>
<p>A main script is a simulation script. By default, each scene in V-REP will have one main script. It contains the basic code that allows a simulation to run. Without main script, a running simulation won't do anything.</p>
<p>The main script is called at each simulation step exactly one time. In addition to that, it is called once during initialization (at the start of a simulation), and once during restoration (at the end of a simulation). Thus, the default main script is segmented in 3 parts:</p>
<h4>the initialization part</h4>
<p><span>: this part will be executed one time just at the beginning of a simulation. The code is in charge of preparing a simulation, etc.</span></p>
<h4>the regular part</h4>
<p><span>: this part will be executed at each simulation pass. The code is in charge of handling all the functionality of the simulator (inverse kinematics, proximity sensors, collision detection, dynamics, etc.) in a generic way. Two commands are of particular interest: simLaunchThreadedChildScripts and simHandleChildScripts. simLaunchThreadedChildScripts launches threaded child scripts, while simHandleChildScripts runs non-threaded child scripts. Without those commands, child scripts won't be executed, and specific model functionality or behavior won't operate. The regular part is divided into an actuation (or action/reaction) section and a sensing (or probing) section.</span></p>
<h4>the restoration part</h4>
<p><span>: this part will be executed one time just before a simulation ends. The code is in charge of restoring object's initial configuration, clearing sensor states, collision states, etc.</span></p>
<p><a href="https://studywolf.wordpress.com/2016/04/18/using-vrep-for-simulation-of-force-controlled-models/">using-vrep-for-simulation-of-force-controlled-models</a></p>
<p>the hybrid IK mode works as follows:</p>
<p>Basically Ik will be computed for each leg. We know the desired foot position/orientation, and we compute the leg joint values that satisfy this. This doesn't involve dynamics at all.</p>
<p>The calculated joint values of the joints in hybrid IK mode will be applied as desired position, where the joints in hybrid IK mode are actually in force/torque position control.</p>
<p>Flight simulation:</p>
<p>[https://github.com/simondlevy/hackflight/tree/master/sim]</p>
<p>Magnet simulation:</p>
<p><a href="http://www.coppeliarobotics.com/scenesAndModels/simpleMagnetDemo.ttt">http://www.coppeliarobotics.com/scenesAndModels/simpleMagnetDemo.ttt</a> </p><h2>Get started</h2>
<p>Now that you have the<span> </span><a class="external text" href="https://github.com/NxRLab/ModernRobotics" rel="nofollow">MR code library</a>, you need the cross-platform V-REP robot simulator to allow you to visualize the motions of robots.<span> </span><b>You should complete the items on this page before moving on with the rest of the course!</b><span> </span>Click on any of the images to make them larger.</p>
<p><b>V-REP is computationally intensive. To minimize power usage, make sure to "pause" or "stop" a simulation when you are not using it.</b></p>
<p><b>1.</b><span> </span>Go to<span> </span><a class="external free" href="http://www.coppeliarobotics.com/" rel="nofollow">http://www.coppeliarobotics.com/</a><span> </span>and download and install the free V-REP PRO EDU software for your operating system.</p>
<p><b>2.</b><span> </span>Launch V-REP and experiment with it. I suggest you choose File &gt; Open scene... and open one of the example "scenes" that comes with V-REP. V-REP "scenes" are specifications of environments, robots, and their actions, and when you press the "play" button the simulation begins. Experimenting with these scenes will show you some of the capabilities of V-REP. For example, you could choose the "motionPlanningAndGrasping.ttt" scene, as shown in the image below. (All scene files end in .ttt.)</p>
<p><img alt="" height="534" src="/images/700px-VREP-demo-open.png" width="700"/></p>
<dl>
<dd><b>Important note regarding screen resolution:</b><span> </span>If you find the text and graphics to be too small on a high-resolution screen, you can edit the file "system/usrset.txt" to change the value of the variable "highResDisplay" to 1. On the Mac, this file is hidden in the directory "vrep.app" (the application you double-click to execute V-REP). You can see the contents of this directory using the Terminal utility on your Mac. In Terminal, use "cd" to navigate to the folder where vrep.app is, then cd to the directory "Contents/MacOS/system" to see usrset.txt.</dd>
</dl>
<p><b>3.</b><span> </span>Press the "play" button at the top of the window to see the robots executing motion plans.</p>
<p><img alt="" height="459" src="/images/700px-VREP-motion-planning.png" width="700"/></p>
<p><b>4.</b><span> </span>We will be using several custom scenes in this specialization. You should download the .zip folder from<span> </span><a href="http://hades.mech.northwestern.edu/index.php/V-REP_Introduction" title="V-REP Introduction">V-REP Introduction</a><span> </span>and unzip it. The scenes include: interactive UR5 (Scene 1), csv animation UR5 (Scene 2), interactive youBot (Scene 3), and csv animation youBot (Scene 4). The Universal Robots UR5 is a 6-joint robot arm and the KUKA youBot is a mobile manipulator consisting of a 5-joint robot arm mounted on an omnidirectional robot base with 4 mecanum wheels. "Interactive" means that you can move sliders that represent the joint positions of the robot, and you'll see the robot move in response. "csv animation" means that the scene expects you to provide a "comma-separated values" (csv) file. A row of the file is a set of joint values, separated by commas, corresponding to the configuration of the robot at a particular instant. Subsequent rows are the configuration of the robot at later times, and the csv file is played as an animation by V-REP.</p>
<p>Included in the .zip folder are the scene files themselves as well as example input files for some of the scenes. You should make sure your unzipped folder is in a convenient, memorable location on your computer, as you will have to type in the full path to the input files when you use them in the V-REP scenes that require them.</p>
<p><b>5.</b><span> </span>If you currently have a simulation running in V-REP, press the "stop" button to stop it. Then choose File &gt; Open scene... and open the interactive UR5 scene (Scene1_UR5.ttt) you downloaded. Press the "play" button, choose the "Joint Angle Sliders" tab, and experiment with moving the sliders to see how the joints move.</p>
<p><img alt="" height="429" src="/images/700px-Vrep-im3.jpg" width="700"/></p>
<p><b>6.</b><span><span> </span>Open and run (press "play") the youBot csv animation scene (Scene4_youBot_csv.ttt). Load the example .csv file for the youBot. You will have to provide the full path to the file; in the example on the Mac below, the path is "/Users/kevin/V-REP_scenes/Scene4_example.csv". After clicking "Open File," press the "Play" button just below where you entered the file path. You should see the mobile robot continually executing the trajectory encoded in the .csv file.</span></p>
<p><span><img alt="" height="496" src="/images/700px-Vrep-im4.png" width="700"/></span></p>
<p>The first line of the .csv file is</p>
<p>0,-0.526,0,0,-0.785,0.785,-1.571,0,0,0,0,0</p>
<p>where the comma-separated values represent: phi angle of mobile robot base, x position of mobile robot base, y position of mobile robot base, joint1, joint2, joint3, joint4, joint5, wheel1, wheel2, wheel3, wheel4. The angles of the wheels are included so you can see the wheels rotating as the robot moves.</p>
<dl>
<dd><b>Important note regarding csv file format:</b><span> </span>The example csv files included for use with the csv scenes assume that periods, not commas, are used as decimal points. So pi is written as 3.14, not as 3,14. If you are using Linux and your region settings are set to a region that uses commas as the decimal separator, one solution, suggested by a Coursera student, is to invoke V-REP using US English settings:</dd>
</dl>
<pre>LC_NUMERIC=en_US.UTF-8 ./vrep.sh
</pre>
<dl>
<dd>Another option, also suggested by a Coursera student, is to open your Linux "System Settings" -&gt; "Language support" -&gt; "Regional Formats" tab. After changing the region to "English (United States)", log out and back in for the change to take effect.</dd>
</dl>
<p><b>7.</b><span> </span>During this specialization, you will have to generate videos of V-REP visualizations. We have found it easiest to use screenshot-video tools for your operating system. On the Mac, you can use Quicktime to record videos from the screen. On Linux, you can use<span> </span><a class="external text" href="http://www.maartenbaert.be/simplescreenrecorder/" rel="nofollow">SimpleScreenRecorder</a><span> </span>or<span> </span><a class="external text" href="http://recordmydesktop.sourceforge.net/about.php" rel="nofollow">recordMyDesktop</a>, for example. On Windows, you can use<span> </span><a class="external text" href="https://icecreamapps.com/Screen-Recorder/" rel="nofollow">Screen Recorder</a>.</p>
<p>V-REP provides its own tool, which you can find at Tools&gt;Video recorder. You may need to stop the current scene to be able to configure the video recorder. You can find more information on recording V-REP movies here:<span> </span><a class="external free" href="http://www.coppeliarobotics.com/helpFiles/en/aviRecorder.htm" rel="nofollow">http://www.coppeliarobotics.com/helpFiles/en/aviRecorder.htm</a>.</p>
<p>Try recording and saving a 10 second movie of the youBot animating the example .csv file. Your video should be of reasonable quality, but the compression should be such that the video doesn't use too much memory. For example, a few MB is a reasonably sized short video.</p>
<p><b>When you're finished with the tasks above...</b></p>
<p><b>Congratulations!</b><span> </span>Your MR code library and the V-REP simulator are ready to use. Do not move on to the rest of the course until these are working for you.</p>
<p>In this specialization we will mostly be using V-REP to visualize the motion of robot arms and wheeled mobile robots. For example, we use V-REP to animate your solutions to inverse kinematics, to display the dynamic motion of a robot arm according to dynamics calculations that you will write, to animate the results of path planners you develop, and to simulate a mobile manipulator manipulating an object.</p>
<p>The<span> </span><b>Modern Robotics</b><span> </span>specialization does not teach how to use V-REP in detail, and it uses only a small fraction of V-REP's capabilities. If you want to learn more, you can find links to documentation<span> </span><b><a href="http://hades.mech.northwestern.edu/index.php/V-REP_Introduction#Useful_Resources" title="V-REP Introduction">at the bottom of this page</a>.</b></p><h2>V-rep Introduction</h2>
<p>source: <a href="http://hades.mech.northwestern.edu/index.php/V-REP_Introduction">http://hades.mech.northwestern.edu/index.php/V-REP_Introduction</a> </p>
<p><img alt="" height="250" src="/images/398px-V-rep-sim.jpg" width="398"/></p>
<p><b>Note: V-REP is computationally intensive. To minimize power usage, make sure to "pause" or "stop" a simulation when you are not using it.</b></p>
<p>On<span> </span><a class="external text" href="http://www.coppeliarobotics.com/index.html" rel="nofollow">V-REP's homepage</a><span> </span>the program is described as</p>
<pre>  ...the Swiss army knife among robot simulators: you won't find a simulator with more functions, features, or more elaborate APIs.
</pre>
<p>V-REP's strength comes from several features:</p>
<ol>
<li>V-REP provides a unified framework combining many powerful internal and external libraries that are often useful for robotics simulations. This includes dynamic simulation engines, forward/inverse kinematics tools, collision detection libraries, vision sensor simulations, path planning, GUI development tools, and built-in models of many common robots.</li>
<li>V-REP is highly extensible. V-REP developers provide an API that allows one to write custom plugins that add new features. You can embed<span> </span><a class="external text" href="https://en.wikipedia.org/wiki/Lua_(programming_language)" rel="nofollow">Lua</a><span> </span>scripts directly into a simulation scene that, for example, process simulated sensor data, run control algorithms, implement user interfaces, or even send data to a physical robot. They also provide a remote API that allows one to develop standalone applications in many programming languages that are able to pass data in and out of a running V-REP simulation.</li>
<li>V-REP is cross-platform, mostly open-source, and provides a free educational license.</li>
</ol>
<p>The purpose of this page is not to teach you how to use V-REP. Rather it is to describe demonstration scenes that have been developed to support learning from the book<span> </span><b><a href="http://hades.mech.northwestern.edu/index.php/Modern_Robotics" title="Modern Robotics">Modern Robotics</a></b>. If you are interested to learn more about V-REP, check out the<span> </span><a href="http://hades.mech.northwestern.edu/index.php/V-REP_Introduction#Useful_Resources">Useful Resources</a><span> </span>section below.</p>
<h4><span class="mw-headline" id="Demonstration_V-REP_Scenes">Demonstration V-REP Scenes</span></h4>
<p><a class="internal" href="http://hades.mech.northwestern.edu/images/5/5c/V-REP_scenes.zip" title="V-REP scenes.zip"><b>DOWNLOAD ALL DEMONSTRATION V-REP SCENES AND INPUT FILES DESCRIBED BELOW.</b></a></p>
<p>To run any of the scenes below, the first step will be to<span> </span><a class="external text" href="http://www.coppeliarobotics.com/downloads.html" rel="nofollow">download V-REP</a><span> </span>for your operating system. You should download the latest non-limited EDUCATIONAL version. Next you will have to install V-REP. On Windows, you simply have an EXE that installs V-REP. On a Mac, you first need to unzip the download. The directory that is produced by unzipping the download contains a<span> </span><code>vrep.app</code><span> </span>directory that should allow you start V-REP through normal mechanisms, e.g., Finder/Spotlight/Launchpad. On Linux, you will need to extract the compressed tar archive (e.g., using a command like<span> </span><code>tar xvf V-REP_PRO_EDU_V3_3_2_64_Linux.tar.gz</code>). Then you need to change directories into the V-REP source directory and run the<span> </span><code>vrep.sh</code><span> </span>shell script.</p>
<p>Once V-REP is open you will want to run one of the scenes below. To run any of them, you first run V-REP, then you click<span> </span><code>File-&gt;Open scene...</code><span> </span>and open one of the ttt files that are linked below. Then click either the<span> </span><i>Play</i><span> </span>button from the top toolbar or click<span> </span><code>Simulation-&gt;Start simulation</code><span> </span>and a GUI should pop up. Clicking the<span> </span><i>Stop</i><span> </span>button or<span> </span><code>Simulation-&gt;Stop simulation</code><span> </span>will close the GUI and stop the simulation.</p>
<p>Most of the scenes feature a simulation of a kinematically-controlled, non-respondable robot.<span> </span><i>Kinematically controlled</i><span> </span>means that all dynamics (inertias, torques, friction, etc.) of the system are neglected. We specify a configuration of the robot and it is instantaneously "teleported" to the new configuration.<span> </span><i>Non-respondable</i><span> </span>means that the links of the robot are not capable of interacting with the world or each other through collisions. In other words, we can put the robot in configurations that result in self-collisions.</p>
<p>The "interactive" scenes allow you to visualize the robot as you change its configuration using sliders. The "CSV" scenes allow animations of a robot based on a trajectory stored in a comma-separated values file, where each line corresponds to a timestep and consists of comma-separated numbers specifying the robot's configuration at that timestep. There are no joint limits in the "CSV" scenes.</p>
<p><a href="http://hades.mech.northwestern.edu/index.php/Writing_a_CSV_File" title="Writing a CSV File"><b>This page has information on writing csv files in Python, MATLAB, and Mathematica.</b></a></p>
<p>The CSV mobile manipulation scene is a partly dynamically-controlled simulation of a respondable<span> </span><a class="external text" href="http://www.youbot-store.com/" rel="nofollow">youBot</a><span> </span>from<span> </span><a class="external text" href="https://www.kuka.com/en-us" rel="nofollow">KUKA</a>.</p>
<dl>
<dd><b>Important note regarding csv file format:</b><span> </span>The example csv files included below for use with the csv scenes assume that periods, not commas, are used as decimal points. So pi is written as 3.14, not as 3,14. If you are using Linux and your region settings are set to a region that uses commas as the decimal separator, one solution, suggested by a Coursera student, is to invoke V-REP using US English settings:</dd>
</dl>
<pre>LC_NUMERIC=en_US.UTF-8 ./vrep.sh
</pre>
<dl>
<dd>Another option, also suggested by a Coursera student, is to open the Linux "System Settings" -&gt; "Language support" -&gt; "Regional Formats" tab. After changing the region to "English (United States)", log out and back in for the change to take effect.</dd>
</dl>
<p>In each scene, there is a single Lua script called a<span> </span><a class="external text" href="http://www.coppeliarobotics.com/helpFiles/en/childScripts.htm" rel="nofollow">non-threaded child script</a>. When the scene is first run, there is a function that is called that sets up the GUI and creates variables that are going to be needed later on in the simulation. Then during every step of the simulation the<span> </span><a class="external text" href="http://www.coppeliarobotics.com/helpFiles/en/mainScript.htm" rel="nofollow">main script</a>, which is part of every V-REP scene, runs an "actuation" function from the child script. This actuation function is responsible for processing all of the changes to the GUI since the last time it was called (buttons clicked, label updates, etc.), and for sending joint commands to the simulated robot. Technically, there is also a "sensing" function in the child script that gets called by the main script, but in each of these scenes, the sensing function is empty. The GUIs are all built with V-REP's<span> </span><a class="external text" href="http://www.coppeliarobotics.com/helpFiles/en/customUIPlugin.htm" rel="nofollow">Qt-based custom UI framework</a>.</p>
<h4><span class="mw-headline" id="Scene_1:_Interactive_UR5">Scene 1: Interactive UR5</span></h4>
<p><span class="mw-headline"><img alt="" height="150" src="/images/142px-Ur5-img.png" width="142"/></span></p>
<p><b>(This scene had minor updates in August 2018.)</b></p>
<p>This scene helps you visualize a<span> </span><a class="external text" href="https://www.universal-robots.com/products/ur5-robot/" rel="nofollow">UR5 robot</a><span> </span>from<span> </span><a class="external text" href="https://www.universal-robots.com/" rel="nofollow">Universal Robots</a>. The model of the UR5 was created by importing a URDF from the ROS-Industrial<span> </span><a class="external text" href="https://github.com/ros-industrial/universal_robot/tree/indigo-devel/ur_description/urdf" rel="nofollow">ur5_description package</a>. The GUI in this scene features two tabs. One tab lets you drag sliders to modify the joint angles of each joint, and the other tab allows you to specify comma-separated angles for all 6 joints in an editable text box and ask for the SE(3) transformation from the base frame to the end-effector frame. The frames attached to the base and end-effector are persistently displayed (x-axis in red, y-axis in green, z-axis in blue). Note that all angles are specified in radians.</p>
<p>Scene 1 files in the<span> </span><a class="internal" href="http://hades.mech.northwestern.edu/images/5/5c/V-REP_scenes.zip" title="V-REP scenes.zip">download of all of the demonstration scenes</a>:</p>
<ul>
<li>Scene1_UR5.ttt: the V-REP scene file.</li>
</ul>
<p></p>
<h4><span class="mw-headline" id="Scene_2:_CSV_Animation_UR5">Scene 2: CSV Animation UR5</span></h4>
<p><b>(This scene had minor updates in August 2018.)</b></p>
<p>This scene animates the motion of the UR5 robot based on a csv file representing the trajectory of the robot. Each row of the csv file represents a timestep and each column of the csv file is the joint angle through time for one of the joints (first column is joint 1, last column is joint 6).</p>
<p>Scene 2 files in the<span> </span><a class="internal" href="http://hades.mech.northwestern.edu/images/5/5c/V-REP_scenes.zip" title="V-REP scenes.zip">download of all of the demonstration scenes</a>:</p>
<ul>
<li>Scene2_UR5_csv.ttt: the V-REP scene file.</li>
<li>Scene2_example.csv: an example input file.</li>
</ul>
<p>See the note above about making sure your language settings are appropriate to properly read csv files in Linux.</p>
<h4><span class="mw-headline" id="Scene_3:_Interactive_youBot">Scene 3: Interactive youBot</span></h4>
<p><span class="mw-headline"><img alt="" height="150" src="/images/169px-Youbot-fig.png" width="169"/></span></p>
<p><b>(Updated August 2018, to match the frame conventions used in the textbook and in Scene 4, animation of the youBot.)</b></p>
<p>This scene helps you visualize a youBot mobile manipulator from KUKA. The KUKA youBot consists of a mecanum-wheel omnidirectional base and a 5R robot arm. Move the mobile base of the robot and the joints of the robot using sliders, and inspect the SE(3) representation of the resulting end-effector coordinate frame. All angles are represented in radians, and linear distances are represented in meters. The following frames are illustrated: the world frame {s}, a frame fixed to the center of the mobile chassis {b}, a frame fixed at the base of the robot arm {0}, and a frame fixed to the end-effector {e}.</p>
<p>Scene 3 files in the<span> </span><a class="internal" href="http://hades.mech.northwestern.edu/images/5/5c/V-REP_scenes.zip" title="V-REP scenes.zip">download of all of the demonstration scenes</a>:</p>
<ul>
<li>Scene3_youBot.ttt: the V-REP scene file.</li>
</ul>
<p></p>
<h4><span class="mw-headline" id="Scene_4:_CSV_Animation_youBot">Scene 4: CSV Animation youBot</span></h4>
<p><span class="mw-headline"><img alt="" height="150" src="/images/211px-Youbot-top-view.png" width="211"/></span></p>
<p><b>(This scene had minor updates in August 2018.)</b></p>
<p>This scene animates the motion of the youBot based on a csv file representing the trajectory of the robot. Each row of the csv file represents a timestep and each column of the csv file is a configuration variable through time. The csv file has either 12 or 13 columns. Columns 1-3 represent the mobile base configuration variables, ordered as (phi, x, y), where phi is the angle of the base and (x, y) is the location of its center. Columns 4-8 represent the five arm joint angles, joint 1 through joint 5. Columns 9-12 represent the wheel angles, where wheel 1 is column 9 and wheel 4 is column 12, and the numbering of the wheels is shown in the figure on the right. Column 13 is optional. If it is present, then 0 means the gripper is open and 1 means the gripper is closed. If there is no column 13, then the gripper is open by default. All angles are specified in radians.</p>
<p>Scene 4 files in the<span> </span><a class="internal" href="http://hades.mech.northwestern.edu/images/5/5c/V-REP_scenes.zip" title="V-REP scenes.zip">download of all of the demonstration scenes</a>:</p>
<ul>
<li>Scene4_youBot_csv.ttt: the V-REP scene file.</li>
<li>Scene4_example.csv: an example input file.</li>
<li>Scene4_base_motions: this folder has five basic motions of the youBot mobile base, showing the correct wheel motions associated with some basic motions of mobile base. You can check that your wheeled mobile base kinematics (or odometry) are correct by comparing your wheel motions to the wheel motions in these .csv files.
<ul>
<li>yb1.csv: Constant speed spin in place (wheels on the left side and right side of the robot move at opposite speeds).</li>
<li>yb2.csv: Constant speed forward motion (all wheels move at the same speed).</li>
<li>yb3.csv: Constant speed sideways motion (wheels on opposite corners move at the same speed).</li>
<li>yb4.csv: Constant speed diagonal motion (wheels 2 and 4 move at the same speed while wheels 1 and 3 are stationary).</li>
<li>yb5.csv: Constant speed diagonal motion (wheels 1 and 3 move at the same speed while wheels 2 and 4 are stationary).</li>
</ul>
</li>
</ul>
<p>See the note above about making sure your language settings are appropriate to properly read csv files in Linux.</p>
<p></p>
<h4><span class="mw-headline" id="Scene_5:_CSV_Motion_Planning_Kilobot">Scene 5: CSV Motion Planning Kilobot</span></h4>
<p><span class="mw-headline"><img alt="" height="150" src="/images/212px-Kilobot-img.png" width="212"/></span></p>
<p><b>(This scene had minor updates in August 2018.)</b></p>
<p>This scene allows you to visualize motion planning on an undirected graph using graph-search techniques such as A*. To visualize the planned motion, we are using the<span> </span><a class="external text" href="https://www.kilobotics.com/" rel="nofollow">kilobot</a><span> </span>robot moving in a planar square environment of dimensions -0.5 &lt;= x &lt;= 0.5 and -0.5 &lt;= y &lt;= 0.5. Obstacles are represented as cylinders, and the graph itself is illustrated as blue nodes with yellow edges. The path that the kilobot actually follows is indicated by green edges, and the goal node is in red. See the image to the right.</p>
<p>This scene does not do motion planning. Instead, it displays the output of your motion planner. It expects you to provide the path to a folder with four files, named nodes.csv, edges.csv, path.csv, and obstacles.csv:</p>
<ul>
<li>nodes.csv: If the graph has N nodes, then this file has N rows. Each row is of the form ID,x,y,heuristic-cost-to-go. ID is the unique integer ID number of the node, and these ID numbers should take values 1 through N. x, y are the (x,y) coordinates of the node in the plane. heuristic-cost-to-go is an optimistic approximation of the shortest path from this node to the goal node (e.g., the Euclidean distance to the goal node). This information is useful for A-star search but is not represented in the visualization of the path.</li>
</ul>
<ul>
<li>edges.csv: If the graph has E edges, then this file has E rows. Each row is of the form ID1,ID2,cost. ID1 and ID2 are the node IDs of the nodes connected by the edge. cost is the cost of traversing that edge. This file can be empty if you do not wish to display edges.</li>
</ul>
<ul>
<li>path.csv: This file specifies the solution path in the graph, and it is a single line, of the form ID1,ID2,... The first number is the ID of the first node in the solution path, and the last number is the ID of the last node in the solution path. If there is no solution to the motion planning problem, the path can consist of a single ID number, the ID of the node where the robot starts (and stays).</li>
</ul>
<ul>
<li>obstacles.csv: This file specifies the locations and diameters of the circular obstacles. Each row is x, y, diameter, where (x,y) is the center of the obstacle and diameter is the diameter of the obstacle. This file can be empty if there are no obstacles.</li>
</ul>
<p>Nothing prevents you from providing files with nodes or edges inside obstacles. The path.csv file is the output of a graph search planner. Inputs to the planner could be the obstacles.csv file and a specification of the positions of the start and goal nodes, or it could be the nodes.csv and edges.csv files and a specification of the start and goal nodes, or it could be other information, depending on your planner. But in any case, this scene requires the four files above for the visualization.</p>
<p>Scene 5 files in the<span> </span><a class="internal" href="http://hades.mech.northwestern.edu/images/5/5c/V-REP_scenes.zip" title="V-REP scenes.zip">download of all of the demonstration scenes</a>:</p>
<ul>
<li>Scene5_motion_planning.ttt: the V-REP scene file.</li>
<li>Scene5_example.zip: a directory containing example input files nodes.csv, edges.csv, path.csv, and obstacles.csv.</li>
</ul>
<p>See the note above about making sure your language settings are appropriate to properly read csv files in Linux.</p>
<p>You may be interested in:</p>
<ul>
<li><a href="http://hades.mech.northwestern.edu/index.php/A*_Graph_Search_Project" title="A* Graph Search Project">A description of an A* search project using this scene.</a></li>
<li><a href="http://hades.mech.northwestern.edu/index.php/Sampling-Based_Planning" title="Sampling-Based Planning">A description of a sampling-based planning project using this scene.</a></li>
</ul>
<p></p>
<h4><span class="mw-headline" id="Scene_6:_CSV_Mobile_Manipulation_youBot">Scene 6: CSV Mobile Manipulation youBot</span></h4>
<p><span class="mw-headline"><img alt="" height="150" src="/images/230px-Youbot-capstone.png" width="230"/></span></p>
<p><b>(This scene had minor updates in August 2018.)</b></p>
<p><a href="http://hades.mech.northwestern.edu/index.php/Mobile_Manipulation_Capstone" title="Mobile Manipulation Capstone"><b>This page has a description of a capstone mobile manipulation project using this scene, as well as more details regarding the operation of the physics engines, the kinematics of the youBot, properties of the end-effector (gripper), and properties of the cube.</b></a></p>
<p>This scene has a youBot mobile manipulator and a cube. The youBot is expected to pick up the cube and put it down at a goal location ("pick and place"). This scene animates a user-specified csv file specifying the motion of the youBot, much as in Scene 4, except now the gripper interacts dynamically with the cube. Each row of the csv file has 13 variables: 3 for the chassis configuration (phi, x, y), 5 for the arm joint angles, 4 for the wheel angles (where the wheels are numbered as shown in Scene 4), and 1 for the gripper state (0 = open, 1 = closed). Unlike previous csv visualization scenes where V-REP simply makes a movie of the configurations, and there is no notion of the simulated time between successive lines in the csv file, this V-REP scene is performing a dynamic simulation, so the time between each line is important to determine the dynamic behavior.<span> </span><b>The simulated time between each line of the csv file is 0.01 seconds (10 milliseconds).</b></p>
<p>The gripper of the youBot and the cube are dynamically modeled to simulate practical pick-and-place. In other words, if the gripper does not close on the block properly, it may slide away, and if you open the gripper when it is holding a block, the block will fall to the floor. The interaction between the gripper and the block is governed by a "physics engine," which approximately accounts for friction, mass, inertial, and other properties. The default physics engine for this scene is ODE.</p>
<p>Gripper opening and closing may take up to approximately 0.625 seconds. Assume, for example, that the first 100 lines of your csv file have the gripper state as 0 (open). Then, on line 101, you change the gripper state to 1 (closed). This transition from 0 to 1 initiates the closing action, but the closing may not actually complete for 0.625 seconds. So you should keep the gripper state at 1 for at least 63 consecutive lines of your csv file to ensure that the gripper closes all the way. Similarly, it may take up to 0.625 seconds for the gripper to open, so you should keep the gripper state at 0 for at least 63 consecutive lines to ensure that the gripper opens all the way. Gripper opening/closing actually terminates when a force threshold is reached on the fingers or the fingers have completed the motion.</p>
<p>You can set the initial and goal configurations of the cube with a GUI inside the scene, but the default initial configuration is<span> </span><img alt="(x,y,\theta) = (1~\text{m}, 0~\text{m}, 0~\text{rad})" class="tex" src="http://hades.mech.northwestern.edu/images/math/c/e/1/ce1884669139db0006e068c0c3f7bff0.png"/><span> </span>and the goal configuration is at<span> </span><img alt="(x,y,\theta) = (0~\text{m},-1~\text{m},-\pi/2~\text{rad})" class="tex" src="http://hades.mech.northwestern.edu/images/math/e/8/3/e83e7452696f11cc5e88e3cb32ba98f5.png"/>.</p>
<p>Scene 6 files in the<span> </span><a class="internal" href="http://hades.mech.northwestern.edu/images/5/5c/V-REP_scenes.zip" title="V-REP scenes.zip">download of all of the demonstration scenes</a>:</p>
<ul>
<li>Scene6_youbot_cube.ttt: the V-REP scene file.</li>
<li>Scene6_example.csv: an example input file solving the task when the cube's initial and goal configurations are the defaults.</li>
</ul>
<p>See the note above about making sure your language settings are appropriate to properly read csv files in Linux.</p>
<p></p>
<h4><span class="mw-headline" id="Scene_7:_CSV_Animation_MTB">Scene 7: CSV Animation MTB</span></h4>
<div class="floatright"><a class="image" href="http://hades.mech.northwestern.edu/index.php/File:MTB-img.png"><img alt="MTB-img.png" height="150" src="http://hades.mech.northwestern.edu/images/thumb/7/7c/MTB-img.png/171px-MTB-img.png" width="171"/></a></div>
<p><b>(This scene had minor updates in August 2018.)</b></p>
<p>This scene simulates a RRPR robot. It animates a csv file containing a trajectory of joint angles. Each column of the csv file is the joint angle/length through time for one of the joints (in the order of RRPR). A single row of the csv file represents a complete configuration of the robot at a particular time. The prismatic joint (P) has the joint limit range [0, 0.2]. The assumed time step between rows is equal to the time step that V-REP uses for simulation; the default is 0.05 seconds.</p>
<p>Scene 7 files in the<span> </span><a class="internal" href="http://hades.mech.northwestern.edu/images/5/5c/V-REP_scenes.zip" title="V-REP scenes.zip">download of all of the demonstration scenes</a>:</p>
<ul>
<li>Scene7_MTB_csv.ttt: the V-REP scene file.</li>
<li>Scene7_example.csv: An example input file.</li>
</ul>
<p>See the note above about making sure your language settings are appropriate to properly read csv files in Linux.</p>
<p></p>
<h4><span class="mw-headline" id="Scene_8:_CSV_youBot_End-Effector_Animation">Scene 8: CSV youBot End-Effector Animation</span></h4>
<div class="floatright"><a class="image" href="http://hades.mech.northwestern.edu/index.php/File:Capstone-gripper.png"><img alt="Capstone-gripper.png" height="150" src="http://hades.mech.northwestern.edu/images/thumb/7/7a/Capstone-gripper.png/274px-Capstone-gripper.png" width="274"/></a></div>
<p><b>(This scene had minor updates in August 2018.)</b></p>
<p><a href="http://hades.mech.northwestern.edu/index.php/Mobile_Manipulation_Capstone" title="Mobile Manipulation Capstone"><b>This page has a description of a capstone mobile manipulation project (specifically Milestone 2) using this scene.</b></a></p>
<p>This scene is used in<span> </span><a href="http://hades.mech.northwestern.edu/index.php/Mobile_Manipulation_Capstone" title="Mobile Manipulation Capstone">Milestone 2 of the capstone mobile manipulation project</a>. It animates the motion of the gripper of the youBot only (the rest of the youBot is not shown), and this scene is used to validate the planned motion of the gripper. Each line of the csv file has 13 comma-separated values: 12 from the top three rows of the transformation matrix<span> </span><span class="texhtml" dir="ltr"><i>T</i><sub><i>s</i><i>e</i></sub></span><span> </span>representing the configuration of the end-effector frame {e} relative to the space frame {s}, and 1 representing the gripper state (0 = open, 1 = closed). In other words, one line of the csv file is</p>
<pre>r11, r12, r13, r21, r22, r23, r31, r32, r33, px, py, pz, gripper state
</pre>
<p>where the transformation matrix<span> </span><span class="texhtml" dir="ltr"><i>T</i><sub><i>s</i><i>e</i></sub></span><span> </span>is</p>
<p><img alt=" T_{se} = \left[\begin{array}{cccc} r_{11} &amp; r_{12} &amp; r_{13} &amp; p_x \\ r_{21} &amp; r_{22} &amp; r_{23} &amp; p_y \\ r_{31} &amp; r_{32} &amp; r_{33} &amp; p_z \\ 0 &amp; 0 &amp; 0 &amp; 1 \end{array}\right]. " class="tex" src="http://hades.mech.northwestern.edu/images/math/8/8/b/88bcc8abc721e889302a93964b8f536e.png"/></p>
<p>V-REP will animate the motion of the end-effector based on this csv file. It will also show the cube that is to be manipulated by the gripper, at its initial and goal configurations.</p>
<pre>The gripper does not dynamically interact with the cube, however.  
</pre>
<p><a class="external text" href="https://youtu.be/8d_cYwV58lI" rel="nofollow"><b>This video shows an example of an animation created by this scene</b></a>. In this video, the gripper opens and closes instantly, but this scene will show the gripper taking up to 0.625 seconds to open and close, just as in Scene 6.</p>
<p>Scene 8 files in the<span> </span><a class="internal" href="http://hades.mech.northwestern.edu/images/5/5c/V-REP_scenes.zip" title="V-REP scenes.zip">download of all of the demonstration scenes</a>:</p>
<ul>
<li>Scene8_gripper_csv.ttt: the V-REP scene file.</li>
<li>Scene8_example.csv: an example input file solving the task when the cube's initial and goal configurations are the defaults.</li>
</ul>
<p>See the note above about making sure your language settings are appropriate to properly read csv files in Linux.</p>
<p></p>
<h4><span class="mw-headline" id="Switching_Between_Scenes">Switching Between Scenes</span></h4>
<p>Press the<span> </span><i>Stop</i><span> </span>button to stop the simulation of the current scene, then choose<span> </span><code>File&gt;Open scene...</code>. You can also use<span> </span><code>File&gt;Open recent scene</code><span> </span>to switch to a scene you previously loaded. Then you press the<span> </span><i>Play</i><span> </span>button to run the scene. Alternatively, stop the simulation and then press the<span> </span><code>Scenes</code>button in the top toolbar to see which scenes are currently open and select one to be in the foreground. The scene selector toolbar button may also be used to switch between opened scenes. Read more<span> </span><a class="external text" href="http://www.coppeliarobotics.com/helpFiles/en/scenes.htm" rel="nofollow">here</a>.</p>
<h4><span class="mw-headline" id="Recording_a_Movie">Recording a Movie</span></h4>
<p>V-REP comes with a video recorder. Go to<span> </span><code>Tools&gt;Video recorder</code>. You may need to stop the current scene to be able to configure the video recorder. You can find more information on recording V-REP movies here:<span> </span><a class="external free" href="http://www.coppeliarobotics.com/helpFiles/en/aviRecorder.htm" rel="nofollow">http://www.coppeliarobotics.com/helpFiles/en/aviRecorder.htm</a>.</p>
<p>A simpler option may be to just use your computer's screen recording software. On the Mac, you can use Quicktime. On Linux, you can use<span> </span><a class="external text" href="http://www.maartenbaert.be/simplescreenrecorder/" rel="nofollow">SimpleScreenRecorder</a><span> </span>or<span> </span><a class="external text" href="http://recordmydesktop.sourceforge.net/about.php" rel="nofollow">recordMyDesktop</a>. On Windows, you can use<span> </span><a class="external text" href="http://icecreamapps.com/Screen-Recorder/" rel="nofollow">Screen Recorder</a>. Or you may have your own solution.</p>
<h4><span class="mw-headline" id="Exploring_Other_Scenes">Exploring Other Scenes</span></h4>
<p>You are encouraged to explore some of the (quite impressive) scenes that come pre-loaded with V-REP. You can find these scenes in the<span> </span><code>scenes</code>directory under the V-REP directory. Running and studying these can be a great way to learn more about the V-REP capabilities and to understand how to put together more complex scenes.</p>
<h4><span class="mw-headline" id="Useful_Resources">Useful Resources</span></h4>
<ul>
<li><a class="external text" href="http://www.coppeliarobotics.com/resources.html" rel="nofollow">V-REP User Manual and Other Resources</a></li>
<li><a class="external text" href="http://www.coppeliarobotics.com/assets/v-repoverviewpresentation.pdf" rel="nofollow">V-REP Overview Presentation</a></li>
<li><a class="external text" href="http://www.coppeliarobotics.com/videos.html" rel="nofollow">V-REP Videos Page</a></li>
<li><a class="external text" href="http://www.coppeliarobotics.com/helpFiles/en/tutorials.htm" rel="nofollow">V-REP Tutorial Series</a></li>
<li><a class="external text" href="http://www.coppeliarobotics.com/features.html" rel="nofollow">Overview of V-REP Features</a></li>
<li><a class="external text" href="http://www.coppeliarobotics.com/helpFiles/en/apiOverview.htm" rel="nofollow">V-REP API Documentation</a><span> </span>These are all functions that can either be called directly from a custom C/C++ plugin or through a Lua embedded script.</li>
<li><a class="external text" href="http://www.coppeliarobotics.com/helpFiles/en/remoteApiOverview.htm" rel="nofollow">Remote API Documentation</a><span> </span>The Remote API is how V-REP enables scripts and programs written in other languages (MATLAB, Java, Python, etc.) to interact with a V-REP simulation</li>
</ul><h1>Solvespace</h1>
<h4>TECHNOLOGY: SOLVING CONSTRAINTS</h4>
<p>The core of any parametric CAD program is its geometric constraint solver. The solver starts with geometric properties of the sketch, like a line length or an angle or a tangency. Based on these properties, it calculates a simple representation of the sketch's lines, points, and curves.</p>
<p>For a trivial example, we might specify that a point lies 10 mm from the origin, and 5 mm from the x-axis. We also specify that the line from the origin to that point makes a 65° angle with the z-axis. That point turns out to have (x, y, z) = (8.66, 2.67, 4.23), after solving three equations in three unknowns. A real sketch may involve hundreds of unknowns.</p>
<p>In SolveSpace, constraints are represented as equations in a symbolic algebra system. In general, these equations are solved numerically, by a modified Newton's method. Some special cases are handled, for any equation that can be solved by forward-substitution, and equations that are soluble alone.</p>
<p>If the sketch is not fully constrained, then the Jacobian is solved in a least squares sense, with each equation written in such a way as to make the quantity being minimized a useful penalty metric. This tends to yield "less surprising" results when dragging points in an underconstrained sketch, compared to approaches that use weak dimensions to keep the sketch always fully constrained.</p>
<p>A failure to converge almost always results from a real problem with the specified constraints. For example, a sketch that describes a linkage will fail to converge when the real linkage would bind. If multiple solutions exist, then the initial position of the sketch determines which is chosen. The natural result (according to the basin of attraction of the numerical method) is generally a reasonable choice, though some cases are handled specially.</p>
<p>In general, constraints apply in 3d. A constraint may also apply projected into a workplane. For example, a constraint on the distance between two points may actually apply to the distance between the projections of those two points into the specified plane. Angle, point-coincident, and point-on-curve constraints are similarly available in projected forms.</p>
<p>The constraint solver used in SolveSpace is available separately as a library.</p>
<h1>Pygrouf</h1>
<p><a href="https://github.com/chiamingyen/pygrouf">https://github.com/chiamingyen/pygrouf</a> </p>
<p>改寫 Pygrouf 成為合用的網際同儕互評暨自評系統.</p>
<h4>參考資料</h4>
<p><a href="https://teaching.berkeley.edu/resources/assessment-and-evaluation/design-assessment/rubrics">https://teaching.berkeley.edu/resources/assessment-and-evaluation/design-assessment/rubrics</a> </p>
<p><a href="http://www.teach-nology.com/web_tools/rubrics/">http://www.teach-nology.com/web_tools/rubrics/</a> </p>
<p><a href="/downloads/The Effects of Instructional Rubrics on Learning to Write.pdf">The Effects of Instructional Rubrics on Learning to Write.pdf</a></p>
<p><a href="https://github.com/ubc/iPeer">https://github.com/ubc/iPeer</a> </p>
<p><a href="https://github.com/WebPA/WebPA">https://github.com/WebPA/WebPA</a> </p>
<p><a href="https://github.com/krstnschwpwr/peer_review_system">https://github.com/krstnschwpwr/peer_review_system</a> </p>
<p><a href="https://github.com/TEAMMATES/teammates">https://github.com/TEAMMATES/teammates</a>  (<a href="https://teammatesv4.appspot.com/">https://teammatesv4.appspot.com/</a> )</p><h1>CAX</h1>
<p><a href="https://en.wikipedia.org/wiki/Computer-aided_technologies">Computer Aided Technology</a></p><h2>PythonOCC</h2>
<p><a href="https://github.com/tpaviot/pythonocc-core">https://github.com/tpaviot/pythonocc-core</a> </p>
<p><a href="http://www.pythonocc.org/">http://www.pythonocc.org/</a> </p>
<p><a href="https://groups.google.com/forum/#!forum/pythonocc">https://groups.google.com/forum/#!forum/pythonocc</a> </p>
<p><a href="https://sites.google.com/site/pythonocc/">https://sites.google.com/site/pythonocc/</a> </p>
<p><img alt="" height="620" src="/images/stepAssyCadViewer3.png" width="800"/></p><h2>Math</h2>
<h4>Real world application of Fourier Series:</h4>
<p><a href="http://mathworld.wolfram.com/FourierSeries.html">http://mathworld.wolfram.com/FourierSeries.html</a></p>
<p>A Fourier series is an expansion of a periodic function f(x) in terms of an infinite sum of sines and cosines. Fourier series make use of the orthogonality relationships of the sine and cosine functions. The computation and study of Fourier series is known as harmonic analysis and is extremely useful as a way to break up an arbitrary periodic function into a set of simple terms that can be plugged in, solved individually, and then recombined to obtain the solution to the original problem or an approximation to it to whatever accuracy is desired or practical.</p>
<p>In particular, since the superposition principle holds for solutions of a linear homogeneous ordinary differential equation, if such an equation can be solved in the case of a single sinusoid, the solution for an arbitrary function is immediately available by expressing the original function as a Fourier series and then plugging in the solution for each sinusoidal component. In some special cases where the Fourier series can be summed in closed form, this technique can even yield analytic solutions.</p>
<p>Any set of functions that form a complete orthogonal system have a corresponding generalized Fourier series analogous to the Fourier series. For example, using orthogonality of the roots of a Bessel function of the first kind gives a so-called Fourier-Bessel series.</p>
<p><a href="http://math.stackexchange.com/questions/579453/real-world-application-of-fourier-series">http://math.stackexchange.com/questions/579453/real-world-application-of-fourier-series</a></p>
<p><a href="https://www.quora.com/Why-are-Fourier-series-important-Are-there-any-real-life-applications-of-Fourier-series">https://www.quora.com/Why-are-Fourier-series-important-Are-there-any-real-life-applications-of-Fourier-series</a></p>
<p>It turns out that (almost) any kind of a wave can be written as a sum of sines and cosines. So for example.</p>
<h4>Areas that Fourier Series are useful:</h4>
<p>1. Signal Processing. It may be the best application of Fourier analysis.</p>
<p>2. Approximation Theory. We use Fourier series to write a function as a trigonometric polynomial.</p>
<p>3. Control Theory. The Fourier series of functions in the differential equation often gives some prediction about the behavior of the solution of differential equation. They are useful to find out the dynamics of the solution.</p>
<p>4. Partial Differential equation. We use it to solve higher order partial differential equations by the method of separation of variables.</p>
<h4>Fourier analysis for designing better running shoes:</h4>
<p>For a very specific example: One of our undergraduate students was taking data generated by a person running on a force plate. Since force exerted on your feet from running is for the most part periodic, she fit the data with a curve using Fourier analysis. The work that followed can be used to help develop better running shoes.</p>
<h4>Sympy for Fourier Series analysis:</h4>
<p><a href="http://docs.sympy.org/latest/modules/series/fourier.html">http://docs.sympy.org/latest/modules/series/fourier.html</a></p>
<h4>Futher studies:</h4>
<p><a href="http://jsjk.cn.nctu.edu.tw/JSJK/DSAS/DSAS_5_Fourier%20Transform%20and%20Laplace%20Transform.pdf">http://jsjk.cn.nctu.edu.tw/JSJK/DSAS/DSAS_5_Fourier%20Transform%20and%20Laplace%20Transform.pdf</a></p>
<p><a href="http://electronics.stackexchange.com/questions/86489/relation-and-difference-between-fourier-laplace-and-z-transforms">http://electronics.stackexchange.com/questions/86489/relation-and-difference-between-fourier-laplace-and-z-transforms</a></p>
<p><a href="http://www.ijser.org/researchpaper/Relation-between-Fourier--Laplace-and-Z-transforms.pdf">http://www.ijser.org/researchpaper/Relation-between-Fourier--Laplace-and-Z-transforms.pdf</a></p><h2>Range Software</h2>
<p><a href="http://range-software.com">http://range-software.com</a> </p>
<p><a href="https://github.com/Range-Software/range3">https://github.com/Range-Software/range3</a></p>
<p>Windows 64 位元可攜 <a href="https://drive.google.com/file/d/1Nro6AKutboRbFh3uY5cJQP3BVVuZfFGj/view?usp=sharing">range software3.7z</a> 下載</p>
<p><img alt="" height="470" src="/images/range_software_ex1jpg.jpg" width="800"/></p><h2>FreeFem++</h2>
<p><a href="https://freefem.org/">https://freefem.org/</a> </p>
<p><a href="https://github.com/FreeFem/FreeFem-sources">https://github.com/FreeFem/FreeFem-sources</a> </p>
<p><a href="https://github.com/FreeFem/FreeFem-doc-pdf">https://github.com/FreeFem/FreeFem-doc-pdf</a> </p>
<h4>IDE</h4>
<p style="padding-left: 30px;"><a href="https://www.ljll.math.upmc.fr/lehyaric/ffcs/">https://www.ljll.math.upmc.fr/lehyaric/ffcs/</a> </p>
<h4>Topics in Scientific Computing</h4>
<p style="padding-left: 30px;"><a href="http://www.math.pitt.edu/~sussmanm/3040Summer14/math3040.html">http://www.math.pitt.edu/~sussmanm/3040Summer14/math3040.html</a> </p><h2>FEniCS</h2>
<p><a href="https://fenicsproject.org/">https://fenicsproject.org/</a> </p>
<h4>Python Interface</h4>
<p style="padding-left: 30px;"><a href="https://pypi.org/project/DOLFIN/">https://pypi.org/project/DOLFIN/</a> </p>
<h4>Automated Solution of Differential Equations by the Finite Element Method - The FEniCS Book</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-642-23099-8">https://link.springer.com/book/10.1007/978-3-642-23099-8</a> </p>
<h4>Solving PDEs in Python -The FEniCS Tutorial I</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-52462-7">https://link.springer.com/book/10.1007/978-3-319-52462-7</a> </p><h1>參考資料</h1>
<p><a href="http://hades.mech.northwestern.edu/index.php/ME_449_Robotic_Manipulation">http://hades.mech.northwestern.edu/index.php/ME_449_Robotic_Manipulation</a> </p>
<p style="padding-left: 30px;"><a href="/downloads/AppendixE-linear-algebra-review-Sept21-2018.pdf">linear algebra.pdf</a></p>
<p><a href="http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_V-REP_Simulator">http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_V-REP_Simulator</a> </p>
<p style="padding-left: 30px;"><a href="/downloads/ModernRobotics_lib.7z">Modern Robotics library.7z</a> (<a href="https://github.com/NxRLab/ModernRobotics">https://github.com/NxRLab/ModernRobotics</a>)</p>
<p style="padding-left: 30px;"><a href="https://github.com/NxRLab/ModernRobotics">https://github.com/NxRLab/ModernRobotics</a> </p>
<p style="padding-left: 30px;"><a href="/downloads/MR_practice_exercises.pdf">MR_practice_exercises.pdf</a></p>
<p><a href="http://hades.mech.northwestern.edu/index.php/Mobile_Manipulation_Capstone">http://hades.mech.northwestern.edu/index.php/Mobile_Manipulation_Capstone</a> </p>
<p style="padding-left: 30px;"><a href="/downloads/V-REP_scenes.zip">V-rep scenes.zip</a></p>
<h4>Springer Handbook of Robotics </h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-32552-1">https://link.springer.com/book/10.1007/978-3-319-32552-1</a> </p>
<p style="padding-left: 30px;"><a href="http://handbookofrobotics.org/view-chapter/videodetails/0">http://handbookofrobotics.org/view-chapter/videodetails/0</a> </p>